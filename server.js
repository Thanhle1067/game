const express = require('express');const http = require('http');const { Server } = require('socket.io');const cors = require('cors');const helmet = require('helmet');const app = express();app.use(express.json());app.use(express.urlencoded({ extended: true }));app.use(cors());app.use(helmet({ contentSecurityPolicy: false }));const server = http.createServer(app);const io = new Server(server, { cors: { origin: "*" } });const LOG_MAX = 200;const logs = [];function logRow(kind, info) { const row = { ts: new Date().toISOString(), kind, ...info }; logs.push(row); while (logs.length > LOG_MAX) logs.shift(); io.emit('log', row); return row; }app.use('/', express.static('public'));function toInt(v, def) { if (v === undefined || v === null || v === '') return def; const n = parseInt(v, 10); return Number.isFinite(n) ? n : def; }function pickSec(obj, def = null) { return toInt(obj?.sec ?? obj?.value1 ?? obj?.amount, def); }function pickAmount(obj, def = 1) { return toInt(obj?.amount ?? obj?.coins ?? obj?.likeCount ?? obj?.repeatCount, def); }function pickUsername(obj, def = 'Anonymous') { return (obj?.u || obj?.username || obj?.tikfinityUsername || obj?.nickname || def); }function emitGift({ username='Anonymous', amount=1, sec=null, type='normal' }, req) { const payload = { username, amount, sec, type }; io.emit('gift', payload); logRow('gift', { path: req.path, method: req.method, query: req.query, body: req.body, payload }); return { ok:true, ...payload }; }app.get('/api/test', (req,res)=>res.json({ok:true}));app.get('/api/gift',   (req,res)=>{ res.json(emitGift({ username: pickUsername(req.query), amount: pickAmount(req.query,1), sec: toInt(req.query.sec, null), type: req.query.type || 'normal' }, req));});app.post('/api/gift',  (req,res)=>{ res.json(emitGift({ username: pickUsername(req.body),  amount: pickAmount(req.body,1),  sec: toInt(req.body.sec, null),  type: req.body.type || 'normal' }, req));});app.get('/api/add',    (req,res)=>{ res.json(emitGift({ username: pickUsername(req.query), amount: pickAmount(req.query,1), sec: toInt(req.query.sec, null), type:'normal' }, req));});app.post('/api/add',   (req,res)=>{ res.json(emitGift({ username: pickUsername(req.body),  amount: pickAmount(req.body,1),  sec: pickSec(req.body, null),   type:'normal' }, req));});app.get('/api/rescue',(req,res)=>{ res.json(emitGift({ username: pickUsername(req.query), amount: pickAmount(req.query,1), sec: toInt(req.query.sec, null), type:'rescue' }, req));});app.post('/api/rescue',(req,res)=>{ res.json(emitGift({ username: pickUsername(req.body),  amount: pickAmount(req.body,1),  sec: pickSec(req.body, null),   type:'rescue' }, req));});app.get('/api/logs', (req,res)=>res.json({ ok:true, logs }));app.get('/debug', (req,res)=>{ res.setHeader('Content-Type','text/html; charset=utf-8'); res.end(`<!doctype html><html><head><meta charset="utf-8"><title>Debug</title><style>body{font-family:system-ui;background:#0b1220;color:#fff}.row{padding:8px;border-bottom:1px solid #333;font-family:monospace}</style></head><body><h2>Realtime Logs</h2><div id="list"></div><script src="/socket.io/socket.io.js"></script><script> const list=document.getElementById('list'); function row(d){const e=document.createElement('div');e.className='row'; e.textContent=d.ts+" | "+d.kind+" | "+JSON.stringify(d.payload);list.prepend(e);} fetch('/api/logs').then(r=>r.json()).then(o=>(o.logs||[]).forEach(row)); const s=io(); s.on('log',row);</script></body></html>`); });io.on('connection', s=>s.emit('hello',{msg:'connected'}));const PORT = process.env.PORT || 3000;server.listen(PORT,'0.0.0.0',()=>console.log(`Server running on ${PORT}`));